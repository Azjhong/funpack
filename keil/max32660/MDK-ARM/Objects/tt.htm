<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\tt.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\tt.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Apr 03 15:22:18 2021
<BR><P>
<H3>Maximum Stack Usage =        460 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; task_process &rArr; blood_data_update &rArr; detectPulse &rArr; print_data &rArr; UART_Write &rArr; uart_error_clear
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[27]">DMA0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">DMA0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5]">BusFault_Handler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[27]">DMA0_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[28]">DMA1_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[29]">DMA2_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[2a]">DMA3_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[22]">FLC_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[23]">GPIO0_IRQHandler</a> from pb.o(i.GPIO0_IRQHandler) referenced from startup_max32660.o(RESET)
 <LI><a href="#[41]">GPIOWAKE_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[2f]">I2C1_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from board.o(i.NMI_Handler) referenced from startup_max32660.o(RESET)
 <LI><a href="#[b]">PF_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[43]">PreInit</a> from system_max32660.o(i.PreInit) referenced from startup_max32660.o(.text)
 <LI><a href="#[d]">RSV00_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[f]">RSV01_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[13]">RSV02_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[14]">RSV03_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[15]">RSV04_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[16]">RSV05_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[17]">RSV06_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[1d]">RSV07_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[1e]">RSV08_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[1f]">RSV09_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[20]">RSV10_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[21]">RSV11_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[24]">RSV12_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[25]">RSV13_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[26]">RSV14_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[2b]">RSV15_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[2c]">RSV16_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[2d]">RSV17_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[2e]">RSV18_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[30]">RSV19_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[31]">RSV20_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[32]">RSV21_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[33]">RSV22_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[34]">RSV23_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[35]">RSV24_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[36]">RSV25_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[37]">RSV26_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[38]">RSV27_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[39]">RSV28_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[3a]">RSV29_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[3b]">RSV30_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[3c]">RSV31_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[3d]">RSV32_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[3e]">RSV33_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[3f]">RSV34_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[40]">RSV35_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from watch.o(i.RTC_IRQHandler) referenced from startup_max32660.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[1b]">SPI0_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[1c]">SPI1_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from watch.o(i.SysTick_Handler) referenced from startup_max32660.o(RESET)
 <LI><a href="#[10]">TMR0_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[11]">TMR1_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[12]">TMR2_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[19]">UART0_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[1a]">UART1_IRQHandler</a> from user_uart.o(i.UART1_IRQHandler) referenced from startup_max32660.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[c]">WDT0_IRQHandler</a> from startup_max32660.o(.text) referenced from startup_max32660.o(RESET)
 <LI><a href="#[44]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_max32660.o(.text)
 <LI><a href="#[46]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[45]">fputc</a> from stdio.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[42]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[47]">read_cb</a> from user_uart.o(i.read_cb) referenced from user_uart.o(i.uart_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[44]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[48]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _main_scatterload &rArr; __scatterload &rArr; __main_after_scatterload &rArr; SystemInit &rArr; SYS_Clock_Select &rArr; SYS_Clock_Timeout &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[60]"></a>$Super$$__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>

<P><STRONG><a name="[e6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[e7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[e9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ea]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FLC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIOWAKE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RSV00_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RSV01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RSV02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RSV03_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RSV04_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RSV05_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RSV06_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RSV07_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RSV08_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RSV09_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RSV10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RSV11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RSV12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RSV13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RSV14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RSV15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RSV16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RSV17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RSV18_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RSV19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RSV20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RSV21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RSV22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RSV23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RSV24_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RSV25_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RSV26_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RSV27_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RSV28_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RSV29_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RSV30_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RSV31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RSV32_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RSV33_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>RSV34_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RSV35_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WDT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32660.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI17Y_TransSetup
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_data_update
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_data
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPulse
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init_time
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init_time
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init_time
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init_time
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_update
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_data_update
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPulse
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_data_update
</UL>

<P><STRONG><a name="[49]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __scatterload &rArr; __main_after_scatterload &rArr; SystemInit &rArr; SYS_Clock_Select &rArr; SYS_Clock_Timeout &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[ef]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[f1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[f2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f3]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[f5]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[52]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5d]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5c]"></a>__main_after_scatterload</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_max32660.o(i.$Sub$$__main_after_scatterload))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __main_after_scatterload &rArr; SystemInit &rArr; SYS_Clock_Select &rArr; SYS_Clock_Timeout &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[61]"></a>Board_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, board.o(i.Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Board_Init &rArr; LED_Init &rArr; LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[23]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pb.o(i.GPIO0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO0_IRQHandler &rArr; GPIO_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>GPIO_Config</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, gpio.o(i.GPIO_Config))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_I2C_Shutdown
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_I2C_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SPIMSS_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SPI17Y_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[65]"></a>GPIO_Handler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gpio.o(i.GPIO_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>GPIO_OutClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.GPIO_OutClr))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[80]"></a>GPIO_OutSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.GPIO_OutSet))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[68]"></a>I2C_Init</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2C_Init &rArr; mxc_delay &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Setspeed
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_init
</UL>

<P><STRONG><a name="[e0]"></a>I2C_MasterRead</STRONG> (Thumb, 228 bytes, Stack size 20 bytes, i2c.o(i.I2C_MasterRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_MasterRead
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_fifo_readBytes
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_bus_read
</UL>

<P><STRONG><a name="[df]"></a>I2C_MasterWrite</STRONG> (Thumb, 220 bytes, Stack size 20 bytes, i2c.o(i.I2C_MasterWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_MasterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_fifo_readBytes
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_bus_write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_bus_read
</UL>

<P><STRONG><a name="[6d]"></a>I2C_Shutdown</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, i2c.o(i.I2C_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Shutdown &rArr; SYS_I2C_Shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Recover
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FreeCallback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_I2C_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_init
</UL>

<P><STRONG><a name="[70]"></a>LCD_Address_Set</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, st7789.o(i.LCD_Address_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese32x32
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese24x24
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese16x16
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>

<P><STRONG><a name="[73]"></a>LCD_DrawLine</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, gui.o(i.LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_init
</UL>

<P><STRONG><a name="[74]"></a>LCD_DrawPoint</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gui.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese32x32
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese24x24
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese16x16
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[75]"></a>LCD_DrawRectangle</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, gui.o(i.LCD_DrawRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LCD_DrawRectangle &rArr; LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_init
</UL>

<P><STRONG><a name="[76]"></a>LCD_Fill</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, gui.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCD_Fill &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>LCD_ShowChar</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, gui.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_real_time
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init_time
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_init
</UL>

<P><STRONG><a name="[78]"></a>LCD_ShowChinese</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, gui.o(i.LCD_ShowChinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LCD_ShowChinese &rArr; LCD_ShowChinese32x32 &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese32x32
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese24x24
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese16x16
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_real_time
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_init
</UL>

<P><STRONG><a name="[79]"></a>LCD_ShowChinese12x12</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, gui.o(i.LCD_ShowChinese12x12))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LCD_ShowChinese12x12 &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
</UL>

<P><STRONG><a name="[7a]"></a>LCD_ShowChinese16x16</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, gui.o(i.LCD_ShowChinese16x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LCD_ShowChinese16x16 &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
</UL>

<P><STRONG><a name="[7b]"></a>LCD_ShowChinese24x24</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, gui.o(i.LCD_ShowChinese24x24))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LCD_ShowChinese24x24 &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
</UL>

<P><STRONG><a name="[7c]"></a>LCD_ShowChinese32x32</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, gui.o(i.LCD_ShowChinese32x32))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LCD_ShowChinese32x32 &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
</UL>

<P><STRONG><a name="[7d]"></a>LCD_ShowIntNum</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, gui.o(i.LCD_ShowIntNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = LCD_ShowIntNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_real_time
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init_time
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_init
</UL>

<P><STRONG><a name="[7f]"></a>LCD_ShowString</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, gui.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_update
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_init
</UL>

<P><STRONG><a name="[72]"></a>LCD_WR_DATA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st7789.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutSet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese32x32
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese24x24
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese16x16
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>

<P><STRONG><a name="[82]"></a>LCD_WR_DATA8</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st7789.o(i.LCD_WR_DATA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_WR_DATA8 &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutSet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[71]"></a>LCD_WR_REG</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st7789.o(i.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutClr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[81]"></a>LCD_Writ_Bus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, st7789.o(i.LCD_Writ_Bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterTrans
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[64]"></a>LED_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_Init &rArr; LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[86]"></a>LED_Off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(i.LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutClr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>PB_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pb.o(i.PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PB_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[43]"></a>PreInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_max32660.o(i.PreInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>RTC_CheckBusy</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtc.o(i.RTC_CheckBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_CheckBusy &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay_stop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay_start
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay_check
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeofdayAlarm
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetSubsecondAlarm
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableTimeofdayInterrupt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableSubsecondInterrupt
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DisableTimeofdayInterrupt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DisableSubsecondInterrupt
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlags
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableRTCE
</UL>

<P><STRONG><a name="[8c]"></a>RTC_ClearFlags</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtc.o(i.RTC_ClearFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_ClearFlags &rArr; RTC_CheckBusy &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>RTC_DisableSubsecondInterrupt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(i.RTC_DisableSubsecondInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_DisableSubsecondInterrupt &rArr; RTC_CheckBusy &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetSubsecondAlarm
</UL>

<P><STRONG><a name="[8e]"></a>RTC_DisableTimeofdayInterrupt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(i.RTC_DisableTimeofdayInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_DisableTimeofdayInterrupt &rArr; RTC_CheckBusy &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeofdayAlarm
</UL>

<P><STRONG><a name="[8f]"></a>RTC_EnableRTCE</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rtc.o(i.RTC_EnableRTCE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_EnableRTCE &rArr; RTC_CheckBusy &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SysTick_Config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[90]"></a>RTC_EnableSubsecondInterrupt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtc.o(i.RTC_EnableSubsecondInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_EnableSubsecondInterrupt &rArr; RTC_CheckBusy &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetSubsecondAlarm
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[91]"></a>RTC_EnableTimeofdayInterrupt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtc.o(i.RTC_EnableTimeofdayInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_EnableTimeofdayInterrupt &rArr; RTC_CheckBusy &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeofdayAlarm
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[92]"></a>RTC_GetFlags</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtc.o(i.RTC_GetFlags))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>RTC_GetSecond</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.RTC_GetSecond))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_real_time
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init_time
</UL>

<P><STRONG><a name="[d5]"></a>RTC_GetSubSecond</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.RTC_GetSubSecond))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init_time
</UL>

<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, watch.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RTC_IRQHandler &rArr; RTC_SetTimeofdayAlarm &rArr; RTC_EnableTimeofdayInterrupt &rArr; RTC_CheckBusy &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeofdayAlarm
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetSubsecondAlarm
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetSecond
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlags
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>RTC_Init</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTC_Init &rArr; RTC_CheckBusy &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckBusy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ClockEnable_X32K
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SysTick_Config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[95]"></a>RTC_SetSubsecondAlarm</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtc.o(i.RTC_SetSubsecondAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTC_SetSubsecondAlarm &rArr; RTC_EnableSubsecondInterrupt &rArr; RTC_CheckBusy &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableSubsecondInterrupt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DisableSubsecondInterrupt
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>RTC_SetTimeofdayAlarm</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtc.o(i.RTC_SetTimeofdayAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTC_SetTimeofdayAlarm &rArr; RTC_EnableTimeofdayInterrupt &rArr; RTC_CheckBusy &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableTimeofdayInterrupt
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DisableTimeofdayInterrupt
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>SPI17Y_Init</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, spi17y.o(i.SPI17Y_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI17Y_Init &rArr; SYS_SPI17Y_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SPI17Y_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[9a]"></a>SPI17Y_MasterTrans</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi17y.o(i.SPI17Y_MasterTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI17Y_TransSetup
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI17Y_MasterTransHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterTrans
</UL>

<P><STRONG><a name="[da]"></a>SPI17Y_ThreeWire</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi17y.o(i.SPI17Y_ThreeWire))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[9e]"></a>SPIMSS_Init</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, spimss.o(i.SPIMSS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPIMSS_Init &rArr; SYS_SPIMSS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SPIMSS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[a0]"></a>SPIMSS_MasterTrans</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spimss.o(i.SPIMSS_MasterTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPIMSS_MasterTrans &rArr; SPIMSS_MasterTransHandler &rArr; SPIMSS_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIMSS_TransSetup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIMSS_MasterTransHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterTrans
</UL>

<P><STRONG><a name="[a5]"></a>SPI_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_Init &rArr; SPI17Y_Init &rArr; SYS_SPI17Y_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIMSS_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI17Y_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[84]"></a>SPI_MasterTrans</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spi.o(i.SPI_MasterTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIMSS_MasterTrans
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI17Y_MasterTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>

<P><STRONG><a name="[a9]"></a>SYS_ClockDisable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mxc_sys.o(i.SYS_ClockDisable))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_I2C_Shutdown
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a8]"></a>SYS_ClockEnable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mxc_sys.o(i.SYS_ClockEnable))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_I2C_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SPIMSS_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SPI17Y_Init
</UL>

<P><STRONG><a name="[97]"></a>SYS_ClockEnable_X32K</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mxc_sys.o(i.SYS_ClockEnable_X32K))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[a6]"></a>SYS_Clock_Select</STRONG> (Thumb, 556 bytes, Stack size 24 bytes, mxc_sys.o(i.SYS_Clock_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SYS_Clock_Select &rArr; SYS_Clock_Timeout &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Clock_Timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6c]"></a>SYS_I2C_GetFreq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mxc_sys.o(i.SYS_I2C_GetFreq))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Setspeed
</UL>

<P><STRONG><a name="[69]"></a>SYS_I2C_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mxc_sys.o(i.SYS_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[6f]"></a>SYS_I2C_Shutdown</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mxc_sys.o(i.SYS_I2C_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYS_I2C_Shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ClockDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Shutdown
</UL>

<P><STRONG><a name="[99]"></a>SYS_SPI17Y_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mxc_sys.o(i.SYS_SPI17Y_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_SPI17Y_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI17Y_Init
</UL>

<P><STRONG><a name="[9f]"></a>SYS_SPIMSS_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mxc_sys.o(i.SYS_SPIMSS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_SPIMSS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIMSS_Init
</UL>

<P><STRONG><a name="[aa]"></a>SYS_SysTick_Config</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, mxc_sys.o(i.SYS_SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SYS_SysTick_Config &rArr; RTC_Init &rArr; RTC_CheckBusy &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableRTCE
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_init
</UL>

<P><STRONG><a name="[ac]"></a>SYS_UART_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, mxc_sys.o(i.SYS_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, watch.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, system_max32660.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Clock_Select
</UL>

<P><STRONG><a name="[5f]"></a>SystemInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, system_max32660.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SystemInit &rArr; SYS_Clock_Select &rArr; SYS_Clock_Timeout &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Clock_Select
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ClockDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>

<P><STRONG><a name="[1a]"></a>UART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, user_uart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART1_IRQHandler &rArr; UART_Handler &rArr; UART_ReadHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32660.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>UART_ClearFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.UART_ClearFlags))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_clear
</UL>

<P><STRONG><a name="[ad]"></a>UART_Handler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uart.o(i.UART_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Handler &rArr; UART_ReadHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>UART_Init</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Init &rArr; SYS_UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[b2]"></a>UART_NumReadAvail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UART_NumReadAvail))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadHandler
</UL>

<P><STRONG><a name="[b6]"></a>UART_NumWriteAvail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.UART_NumWriteAvail))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteHandler
</UL>

<P><STRONG><a name="[b1]"></a>UART_ReadAsync</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, uart.o(i.UART_ReadAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_ReadAsync &rArr; UART_ReadHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_get_lock
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cb
</UL>

<P><STRONG><a name="[b3]"></a>UART_Write</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, uart.o(i.UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_Write &rArr; uart_error_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_get_lock
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_free_lock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_data
</UL>

<P><STRONG><a name="[b5]"></a>UART_WriteByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.UART_WriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>

<P><STRONG><a name="[b7]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f6]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[85]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_fifo_readBytes
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_bus_write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_bus_read
</UL>

<P><STRONG><a name="[f7]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f8]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b9]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f9]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[d2]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_update
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPulse
</UL>

<P><STRONG><a name="[fa]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[fb]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[ba]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_data_update
</UL>

<P><STRONG><a name="[c1]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_data_update
</UL>

<P><STRONG><a name="[c0]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[be]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[bb]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[bd]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[fc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[fd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[fe]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[bc]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[c7]"></a>balanceIntesities</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, blood.o(i.balanceIntesities))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = balanceIntesities &rArr; max30100_bus_write &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_bus_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_data_update
</UL>

<P><STRONG><a name="[c9]"></a>blood_data_update</STRONG> (Thumb, 588 bytes, Stack size 168 bytes, blood.o(i.blood_data_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = blood_data_update &rArr; detectPulse &rArr; print_data &rArr; UART_Write &rArr; uart_error_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_fifo_readBytes
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_bus_read
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meanDiff
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowPassButterworthFilter
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPulse
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcRemoval
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;balanceIntesities
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process
</UL>

<P><STRONG><a name="[dd]"></a>blood_setup</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, blood.o(i.blood_setup))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>dcRemoval</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, blood.o(i.dcRemoval))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dcRemoval
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_data_update
</UL>

<P><STRONG><a name="[d0]"></a>detectPulse</STRONG> (Thumb, 546 bytes, Stack size 128 bytes, blood.o(i.detectPulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = detectPulse &rArr; print_data &rArr; UART_Write &rArr; uart_error_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_data
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_data_update
</UL>

<P><STRONG><a name="[45]"></a>fputc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stdio.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[d7]"></a>lcd_display_time</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, watch.o(i.lcd_display_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lcd_display_time &rArr; display_init_time &rArr; LCD_ShowIntNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_real_time
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init_time
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process
</UL>

<P><STRONG><a name="[d8]"></a>lcd_display_update</STRONG> (Thumb, 180 bytes, Stack size 80 bytes, blood.o(i.lcd_display_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lcd_display_update &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process
</UL>

<P><STRONG><a name="[d9]"></a>lcd_init</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, st7789.o(i.lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lcd_init &rArr; LCD_WR_DATA8 &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutSet
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI17Y_ThreeWire
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterTrans
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>lowPassButterworthFilter</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, blood.o(i.lowPassButterworthFilter))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_data_update
</UL>

<P><STRONG><a name="[42]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = main &rArr; task_process &rArr; blood_data_update &rArr; detectPulse &rArr; print_data &rArr; UART_Write &rArr; uart_error_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_setup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[cb]"></a>max30100_bus_read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, max30100.o(i.max30100_bus_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = max30100_bus_read &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWrite
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRead
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_data_update
</UL>

<P><STRONG><a name="[c8]"></a>max30100_bus_write</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, max30100.o(i.max30100_bus_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = max30100_bus_write &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWrite
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;balanceIntesities
</UL>

<P><STRONG><a name="[cc]"></a>max30100_fifo_readBytes</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, max30100.o(i.max30100_fifo_readBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = max30100_fifo_readBytes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWrite
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRead
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_data_update
</UL>

<P><STRONG><a name="[db]"></a>max30100_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, max30100.o(i.max30100_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = max30100_init &rArr; I2C_Init &rArr; mxc_delay &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Shutdown
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_bus_write
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>meanDiff</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, blood.o(i.meanDiff))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_data_update
</UL>

<P><STRONG><a name="[6a]"></a>mxc_delay</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, mxc_delay.o(i.mxc_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mxc_delay &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay_stop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30100_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[8a]"></a>mxc_delay_check</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mxc_delay.o(i.mxc_delay_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mxc_delay_check
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Clock_Timeout
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckBusy
</UL>

<P><STRONG><a name="[89]"></a>mxc_delay_start</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mxc_delay.o(i.mxc_delay_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Clock_Timeout
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckBusy
</UL>

<P><STRONG><a name="[8b]"></a>mxc_delay_stop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mxc_delay.o(i.mxc_delay_stop))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Clock_Timeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay_check
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckBusy
</UL>

<P><STRONG><a name="[67]"></a>mxc_free_lock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mxc_lock.o(i.mxc_free_lock))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FreeCallback
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIMSS_TransHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI17Y_TransHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadHandler
</UL>

<P><STRONG><a name="[a4]"></a>mxc_get_lock</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mxc_lock.o(i.mxc_get_lock))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIMSS_TransSetup
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadAsync
</UL>

<P><STRONG><a name="[7e]"></a>mypow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui.o(i.mypow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mypow
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
</UL>

<P><STRONG><a name="[d3]"></a>print_data</STRONG> (Thumb, 84 bytes, Stack size 120 bytes, user_uart.o(i.print_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = print_data &rArr; UART_Write &rArr; uart_error_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectPulse
</UL>

<P><STRONG><a name="[47]"></a>read_cb</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, user_uart.o(i.read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = read_cb &rArr; rtc_init &rArr; RTC_SetTimeofdayAlarm &rArr; RTC_EnableTimeofdayInterrupt &rArr; RTC_CheckBusy &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadAsync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_uart.o(i.uart_init)
</UL>
<P><STRONG><a name="[e2]"></a>rtc_init</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, watch.o(i.rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rtc_init &rArr; RTC_SetTimeofdayAlarm &rArr; RTC_EnableTimeofdayInterrupt &rArr; RTC_CheckBusy &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeofdayAlarm
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetSubsecondAlarm
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableTimeofdayInterrupt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableSubsecondInterrupt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableRTCE
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cb
</UL>

<P><STRONG><a name="[de]"></a>task_process</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, task_process.o(i.task_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = task_process &rArr; blood_data_update &rArr; detectPulse &rArr; print_data &rArr; UART_Write &rArr; uart_error_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutSet
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutClr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_update
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_data_update
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_time
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>uart_init</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, user_uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_init &rArr; UART_Init &rArr; SYS_UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadAsync
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_init
</UL>

<P><STRONG><a name="[dc]"></a>watch_init</STRONG> (Thumb, 714 bytes, Stack size 24 bytes, watch.o(i.watch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = watch_init &rArr; LCD_ShowIntNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutClr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SysTick_Config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[66]"></a>I2C_FreeCallback</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, i2c.o(i.I2C_FreeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_FreeCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_free_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Shutdown
</UL>

<P><STRONG><a name="[6e]"></a>I2C_Recover</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, i2c.o(i.I2C_Recover))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Shutdown
</UL>

<P><STRONG><a name="[6b]"></a>I2C_Setspeed</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, i2c.o(i.I2C_Setspeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Setspeed
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_I2C_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[e1]"></a>mxc_delay_init</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, mxc_delay.o(i.mxc_delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay_start
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay
</UL>

<P><STRONG><a name="[a7]"></a>SYS_Clock_Timeout</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mxc_sys.o(i.SYS_Clock_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SYS_Clock_Timeout &rArr; mxc_delay_start &rArr; mxc_delay_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay_stop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay_start
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Clock_Select
</UL>

<P><STRONG><a name="[ab]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mxc_sys.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SysTick_Config
</UL>

<P><STRONG><a name="[9c]"></a>SPI17Y_MasterTransHandler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, spi17y.o(i.SPI17Y_MasterTransHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI17Y_TransHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI17Y_MasterTrans
</UL>

<P><STRONG><a name="[9d]"></a>SPI17Y_TransHandler</STRONG> (Thumb, 548 bytes, Stack size 48 bytes, spi17y.o(i.SPI17Y_TransHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_free_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI17Y_MasterTransHandler
</UL>

<P><STRONG><a name="[9b]"></a>SPI17Y_TransSetup</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, spi17y.o(i.SPI17Y_TransSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI17Y_TransSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI17Y_MasterTrans
</UL>

<P><STRONG><a name="[a2]"></a>SPIMSS_MasterTransHandler</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, spimss.o(i.SPIMSS_MasterTransHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPIMSS_MasterTransHandler &rArr; SPIMSS_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIMSS_TransHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIMSS_MasterTrans
</UL>

<P><STRONG><a name="[a3]"></a>SPIMSS_TransHandler</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, spimss.o(i.SPIMSS_TransHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPIMSS_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_free_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIMSS_MasterTransHandler
</UL>

<P><STRONG><a name="[a1]"></a>SPIMSS_TransSetup</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, spimss.o(i.SPIMSS_TransSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIMSS_TransSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_get_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIMSS_MasterTrans
</UL>

<P><STRONG><a name="[ae]"></a>UART_ReadHandler</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, uart.o(i.UART_ReadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_ReadHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_free_lock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_NumReadAvail
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadAsync
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[af]"></a>UART_WriteHandler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, uart.o(i.UART_WriteHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WriteHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_free_lock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_NumWriteAvail
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[b4]"></a>uart_error_clear</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, uart.o(i.uart_error_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uart_error_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>

<P><STRONG><a name="[d4]"></a>display_init_time</STRONG> (Thumb, 540 bytes, Stack size 64 bytes, watch.o(i.display_init_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = display_init_time &rArr; LCD_ShowIntNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetSubSecond
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetSecond
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_time
</UL>

<P><STRONG><a name="[d6]"></a>display_real_time</STRONG> (Thumb, 1524 bytes, Stack size 40 bytes, watch.o(i.display_real_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = display_real_time &rArr; LCD_ShowIntNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_MasterTrans &rArr; SPI17Y_MasterTrans &rArr; SPI17Y_MasterTransHandler &rArr; SPI17Y_TransHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetSecond
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_time
</UL>

<P><STRONG><a name="[c2]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b8]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[c5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[46]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
